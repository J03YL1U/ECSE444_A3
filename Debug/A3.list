
A3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003678  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08003834  08003834  00004834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004078  08004078  00006018  2**0
                  CONTENTS
  4 .ARM          00000000  08004078  08004078  00006018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004078  08004078  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004078  08004078  00005078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800407c  0800407c  0000507c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004080  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000018  08004098  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08004098  000061f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001013d  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e2  00000000  00000000  00016185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00018468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3c  00000000  00000000  000191f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5eb  00000000  00000000  00019c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec09  00000000  00000000  00044217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106bcf  00000000  00000000  00052e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001599ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003764  00000000  00000000  00159aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0015d26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0015d369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000018 	.word	0x20000018
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800381c 	.word	0x0800381c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	2000001c 	.word	0x2000001c
 80001f8:	0800381c 	.word	0x0800381c

080001fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af02      	add	r7, sp, #8
 8000202:	4603      	mov	r3, r0
 8000204:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == my_Button_Pin) {
 8000206:	88fb      	ldrh	r3, [r7, #6]
 8000208:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800020c:	d145      	bne.n	800029a <HAL_GPIO_EXTI_Callback+0x9e>

		//Everytime we press we change tone
		tone = (tone + 1)%3;
 800020e:	4b25      	ldr	r3, [pc, #148]	@ (80002a4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	1c59      	adds	r1, r3, #1
 8000214:	4b24      	ldr	r3, [pc, #144]	@ (80002a8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000216:	fb83 3201 	smull	r3, r2, r3, r1
 800021a:	17cb      	asrs	r3, r1, #31
 800021c:	1ad2      	subs	r2, r2, r3
 800021e:	4613      	mov	r3, r2
 8000220:	005b      	lsls	r3, r3, #1
 8000222:	4413      	add	r3, r2
 8000224:	1aca      	subs	r2, r1, r3
 8000226:	4b1f      	ldr	r3, [pc, #124]	@ (80002a4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000228:	601a      	str	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800022a:	2100      	movs	r1, #0
 800022c:	481f      	ldr	r0, [pc, #124]	@ (80002ac <HAL_GPIO_EXTI_Callback+0xb0>)
 800022e:	f000 fe67 	bl	8000f00 <HAL_DAC_Stop_DMA>

		//C6 tone
		if (tone == 0) {
 8000232:	4b1c      	ldr	r3, [pc, #112]	@ (80002a4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d10b      	bne.n	8000252 <HAL_GPIO_EXTI_Callback+0x56>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) C6_data, (uint32_t) C6_size, DAC_ALIGN_12B_R);
 800023a:	4b1d      	ldr	r3, [pc, #116]	@ (80002b0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	2300      	movs	r3, #0
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	4613      	mov	r3, r2
 8000246:	4a1b      	ldr	r2, [pc, #108]	@ (80002b4 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000248:	2100      	movs	r1, #0
 800024a:	4818      	ldr	r0, [pc, #96]	@ (80002ac <HAL_GPIO_EXTI_Callback+0xb0>)
 800024c:	f000 fd8c 	bl	8000d68 <HAL_DAC_Start_DMA>
 8000250:	e01e      	b.n	8000290 <HAL_GPIO_EXTI_Callback+0x94>

		//E6 tone
		} else if (tone == 1) {
 8000252:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d10b      	bne.n	8000272 <HAL_GPIO_EXTI_Callback+0x76>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) E6_data, (uint32_t) E6_size, DAC_ALIGN_12B_R);
 800025a:	4b17      	ldr	r3, [pc, #92]	@ (80002b8 <HAL_GPIO_EXTI_Callback+0xbc>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	461a      	mov	r2, r3
 8000260:	2300      	movs	r3, #0
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	4613      	mov	r3, r2
 8000266:	4a15      	ldr	r2, [pc, #84]	@ (80002bc <HAL_GPIO_EXTI_Callback+0xc0>)
 8000268:	2100      	movs	r1, #0
 800026a:	4810      	ldr	r0, [pc, #64]	@ (80002ac <HAL_GPIO_EXTI_Callback+0xb0>)
 800026c:	f000 fd7c 	bl	8000d68 <HAL_DAC_Start_DMA>
 8000270:	e00e      	b.n	8000290 <HAL_GPIO_EXTI_Callback+0x94>

		//G6 tone
		} else if (tone == 2) {
 8000272:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b02      	cmp	r3, #2
 8000278:	d10a      	bne.n	8000290 <HAL_GPIO_EXTI_Callback+0x94>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) G6_data, (uint32_t) G6_size, DAC_ALIGN_12B_R);
 800027a:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	461a      	mov	r2, r3
 8000280:	2300      	movs	r3, #0
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	4613      	mov	r3, r2
 8000286:	4a0f      	ldr	r2, [pc, #60]	@ (80002c4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000288:	2100      	movs	r1, #0
 800028a:	4808      	ldr	r0, [pc, #32]	@ (80002ac <HAL_GPIO_EXTI_Callback+0xb0>)
 800028c:	f000 fd6c 	bl	8000d68 <HAL_DAC_Start_DMA>
		}

		HAL_GPIO_TogglePin(my_Led_GPIO_Port, my_Led_Pin);
 8000290:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000294:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000296:	f001 fdfd 	bl	8001e94 <HAL_GPIO_TogglePin>
	}
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	2000011c 	.word	0x2000011c
 80002a8:	55555556 	.word	0x55555556
 80002ac:	2000005c 	.word	0x2000005c
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000120 	.word	0x20000120
 80002b8:	20000004 	.word	0x20000004
 80002bc:	20000178 	.word	0x20000178
 80002c0:	20000008 	.word	0x20000008
 80002c4:	200001bc 	.word	0x200001bc
 80002c8:	48000400 	.word	0x48000400

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d2:	f000 fb7c 	bl	80009ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d6:	f000 f8c7 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002da:	f000 f9d1 	bl	8000680 <MX_GPIO_Init>
  MX_DMA_Init();
 80002de:	f000 f9a5 	bl	800062c <MX_DMA_Init>
  MX_DAC1_Init();
 80002e2:	f000 f913 	bl	800050c <MX_DAC1_Init>
  MX_TIM2_Init();
 80002e6:	f000 f953 	bl	8000590 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_DACEx_SelfCalibrate(&hdac1, &sConfig, DAC1_CHANNEL_1);
 80002ea:	2200      	movs	r2, #0
 80002ec:	4953      	ldr	r1, [pc, #332]	@ (800043c <main+0x170>)
 80002ee:	4854      	ldr	r0, [pc, #336]	@ (8000440 <main+0x174>)
 80002f0:	f001 f80a 	bl	8001308 <HAL_DACEx_SelfCalibrate>
 */
//  // Start the DAC for both channels
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
//  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);

  HAL_TIM_Base_Start_IT(&htim2);
 80002f4:	4853      	ldr	r0, [pc, #332]	@ (8000444 <main+0x178>)
 80002f6:	f002 fdc7 	bl	8002e88 <HAL_TIM_Base_Start_IT>

  /**
   *  Populate array of tones (part 2, step 3 & 4)
   */
  //
  for (int i = 0; i < C6_size; i++) {
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]
 80002fe:	e02c      	b.n	800035a <main+0x8e>
	  float angleC6 = 2 * PI * i / C6_size;
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	ee07 3a90 	vmov	s15, r3
 8000306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800030a:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8000448 <main+0x17c>
 800030e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000312:	4b4e      	ldr	r3, [pc, #312]	@ (800044c <main+0x180>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	ee07 3a90 	vmov	s15, r3
 800031a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800031e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000322:	edc7 7a00 	vstr	s15, [r7]
	  C6_data[i] = (uint16_t) ((arm_sin_f32(angleC6)+1)*(1365)); // 1365 multiplier as 4095 max output, max sine output of 2, scale down to 2/3 to reduce distortion i.e. (4095/2)*(2/3)
 8000326:	ed97 0a00 	vldr	s0, [r7]
 800032a:	f003 fa05 	bl	8003738 <arm_sin_f32>
 800032e:	eef0 7a40 	vmov.f32	s15, s0
 8000332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000336:	ee77 7a87 	vadd.f32	s15, s15, s14
 800033a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8000450 <main+0x184>
 800033e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000346:	ee17 3a90 	vmov	r3, s15
 800034a:	b299      	uxth	r1, r3
 800034c:	4a41      	ldr	r2, [pc, #260]	@ (8000454 <main+0x188>)
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < C6_size; i++) {
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	3301      	adds	r3, #1
 8000358:	617b      	str	r3, [r7, #20]
 800035a:	4b3c      	ldr	r3, [pc, #240]	@ (800044c <main+0x180>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	697a      	ldr	r2, [r7, #20]
 8000360:	429a      	cmp	r2, r3
 8000362:	dbcd      	blt.n	8000300 <main+0x34>
  }
  for (int i = 0; i < E6_size; i++) {
 8000364:	2300      	movs	r3, #0
 8000366:	613b      	str	r3, [r7, #16]
 8000368:	e02c      	b.n	80003c4 <main+0xf8>
	  float angleE6 = 2 * PI * i / E6_size;
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	ee07 3a90 	vmov	s15, r3
 8000370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000374:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000448 <main+0x17c>
 8000378:	ee67 6a87 	vmul.f32	s13, s15, s14
 800037c:	4b36      	ldr	r3, [pc, #216]	@ (8000458 <main+0x18c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	ee07 3a90 	vmov	s15, r3
 8000384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800038c:	edc7 7a01 	vstr	s15, [r7, #4]
	  E6_data[i] = (uint16_t) ((arm_sin_f32(angleE6)+1)*(1365));
 8000390:	ed97 0a01 	vldr	s0, [r7, #4]
 8000394:	f003 f9d0 	bl	8003738 <arm_sin_f32>
 8000398:	eef0 7a40 	vmov.f32	s15, s0
 800039c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80003a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003a4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000450 <main+0x184>
 80003a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003b0:	ee17 3a90 	vmov	r3, s15
 80003b4:	b299      	uxth	r1, r3
 80003b6:	4a29      	ldr	r2, [pc, #164]	@ (800045c <main+0x190>)
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < E6_size; i++) {
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	3301      	adds	r3, #1
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	4b24      	ldr	r3, [pc, #144]	@ (8000458 <main+0x18c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	693a      	ldr	r2, [r7, #16]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	dbcd      	blt.n	800036a <main+0x9e>
  }
  for (int i = 0; i < G6_size; i++) {
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	e02c      	b.n	800042e <main+0x162>
	  float angleG6 = 2*PI*i/ G6_size;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	ee07 3a90 	vmov	s15, r3
 80003da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003de:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000448 <main+0x17c>
 80003e2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80003e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000460 <main+0x194>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	ee07 3a90 	vmov	s15, r3
 80003ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80003f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003f6:	edc7 7a02 	vstr	s15, [r7, #8]
	  G6_data[i] = (uint16_t) ((arm_sin_f32(angleG6)+1)*(1365));
 80003fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80003fe:	f003 f99b 	bl	8003738 <arm_sin_f32>
 8000402:	eef0 7a40 	vmov.f32	s15, s0
 8000406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800040a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800040e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000450 <main+0x184>
 8000412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800041a:	ee17 3a90 	vmov	r3, s15
 800041e:	b299      	uxth	r1, r3
 8000420:	4a10      	ldr	r2, [pc, #64]	@ (8000464 <main+0x198>)
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < G6_size; i++) {
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	3301      	adds	r3, #1
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <main+0x194>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	429a      	cmp	r2, r3
 8000436:	dbcd      	blt.n	80003d4 <main+0x108>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <main+0x16c>
 800043c:	20000034 	.word	0x20000034
 8000440:	2000005c 	.word	0x2000005c
 8000444:	200000d0 	.word	0x200000d0
 8000448:	40c90fdb 	.word	0x40c90fdb
 800044c:	20000000 	.word	0x20000000
 8000450:	44aaa000 	.word	0x44aaa000
 8000454:	20000120 	.word	0x20000120
 8000458:	20000004 	.word	0x20000004
 800045c:	20000178 	.word	0x20000178
 8000460:	20000008 	.word	0x20000008
 8000464:	200001bc 	.word	0x200001bc

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b096      	sub	sp, #88	@ 0x58
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	2244      	movs	r2, #68	@ 0x44
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f003 f9a4 	bl	80037c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	463b      	mov	r3, r7
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800048a:	2000      	movs	r0, #0
 800048c:	f001 fd54 	bl	8001f38 <HAL_PWREx_ControlVoltageScaling>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000496:	f000 f957 	bl	8000748 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800049a:	2310      	movs	r3, #16
 800049c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800049e:	2301      	movs	r3, #1
 80004a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004a6:	2360      	movs	r3, #96	@ 0x60
 80004a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004aa:	2302      	movs	r3, #2
 80004ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004ae:	2301      	movs	r3, #1
 80004b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80004b6:	233c      	movs	r3, #60	@ 0x3c
 80004b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004be:	2302      	movs	r3, #2
 80004c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004c2:	2302      	movs	r3, #2
 80004c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 fdd8 	bl	8002080 <HAL_RCC_OscConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004d6:	f000 f937 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004da:	230f      	movs	r3, #15
 80004dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004de:	2303      	movs	r3, #3
 80004e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004ee:	463b      	mov	r3, r7
 80004f0:	2105      	movs	r1, #5
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 f9de 	bl	80028b4 <HAL_RCC_ClockConfig>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004fe:	f000 f923 	bl	8000748 <Error_Handler>
  }
}
 8000502:	bf00      	nop
 8000504:	3758      	adds	r7, #88	@ 0x58
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	@ 0x28
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000512:	463b      	mov	r3, r7
 8000514:	2228      	movs	r2, #40	@ 0x28
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f003 f953 	bl	80037c4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800051e:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <MX_DAC1_Init+0x7c>)
 8000520:	4a1a      	ldr	r2, [pc, #104]	@ (800058c <MX_DAC1_Init+0x80>)
 8000522:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000524:	4818      	ldr	r0, [pc, #96]	@ (8000588 <MX_DAC1_Init+0x7c>)
 8000526:	f000 fbfc 	bl	8000d22 <HAL_DAC_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000530:	f000 f90a 	bl	8000748 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000538:	230a      	movs	r3, #10
 800053a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800053c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000540:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800054e:	463b      	mov	r3, r7
 8000550:	2200      	movs	r2, #0
 8000552:	4619      	mov	r1, r3
 8000554:	480c      	ldr	r0, [pc, #48]	@ (8000588 <MX_DAC1_Init+0x7c>)
 8000556:	f000 fd37 	bl	8000fc8 <HAL_DAC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000560:	f000 f8f2 	bl	8000748 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	2210      	movs	r2, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	@ (8000588 <MX_DAC1_Init+0x7c>)
 8000570:	f000 fd2a 	bl	8000fc8 <HAL_DAC_ConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 800057a:	f000 f8e5 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	3728      	adds	r7, #40	@ 0x28
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	2000005c 	.word	0x2000005c
 800058c:	40007400 	.word	0x40007400

08000590 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <MX_TIM2_Init+0x98>)
 80005b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000628 <MX_TIM2_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <MX_TIM2_Init+0x98>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 80005c2:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <MX_TIM2_Init+0x98>)
 80005c4:	f640 22a1 	movw	r2, #2721	@ 0xaa1
 80005c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ca:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <MX_TIM2_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d0:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <MX_TIM2_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005d6:	4814      	ldr	r0, [pc, #80]	@ (8000628 <MX_TIM2_Init+0x98>)
 80005d8:	f002 fbfe 	bl	8002dd8 <HAL_TIM_Base_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80005e2:	f000 f8b1 	bl	8000748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	4619      	mov	r1, r3
 80005f2:	480d      	ldr	r0, [pc, #52]	@ (8000628 <MX_TIM2_Init+0x98>)
 80005f4:	f002 fdbf 	bl	8003176 <HAL_TIM_ConfigClockSource>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005fe:	f000 f8a3 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000602:	2320      	movs	r3, #32
 8000604:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	@ (8000628 <MX_TIM2_Init+0x98>)
 8000610:	f002 ffec 	bl	80035ec <HAL_TIMEx_MasterConfigSynchronization>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800061a:	f000 f895 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	3720      	adds	r7, #32
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000d0 	.word	0x200000d0

0800062c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000632:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_DMA_Init+0x50>)
 8000634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000636:	4a11      	ldr	r2, [pc, #68]	@ (800067c <MX_DMA_Init+0x50>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6493      	str	r3, [r2, #72]	@ 0x48
 800063e:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_DMA_Init+0x50>)
 8000640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064a:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_DMA_Init+0x50>)
 800064c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800064e:	4a0b      	ldr	r2, [pc, #44]	@ (800067c <MX_DMA_Init+0x50>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6493      	str	r3, [r2, #72]	@ 0x48
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_DMA_Init+0x50>)
 8000658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	200b      	movs	r0, #11
 8000668:	f000 fb25 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800066c:	200b      	movs	r0, #11
 800066e:	f000 fb3e 	bl	8000cee <HAL_NVIC_EnableIRQ>

}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b29      	ldr	r3, [pc, #164]	@ (800073c <MX_GPIO_Init+0xbc>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	4a28      	ldr	r2, [pc, #160]	@ (800073c <MX_GPIO_Init+0xbc>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a2:	4b26      	ldr	r3, [pc, #152]	@ (800073c <MX_GPIO_Init+0xbc>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <MX_GPIO_Init+0xbc>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	4a22      	ldr	r2, [pc, #136]	@ (800073c <MX_GPIO_Init+0xbc>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ba:	4b20      	ldr	r3, [pc, #128]	@ (800073c <MX_GPIO_Init+0xbc>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_GPIO_Init+0xbc>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <MX_GPIO_Init+0xbc>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_GPIO_Init+0xbc>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(my_Led_GPIO_Port, my_Led_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006e4:	4816      	ldr	r0, [pc, #88]	@ (8000740 <MX_GPIO_Init+0xc0>)
 80006e6:	f001 fbbd 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : my_Button_Pin */
  GPIO_InitStruct.Pin = my_Button_Pin;
 80006ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(my_Button_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	4810      	ldr	r0, [pc, #64]	@ (8000744 <MX_GPIO_Init+0xc4>)
 8000702:	f001 fa1d 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : my_Led_Pin */
  GPIO_InitStruct.Pin = my_Led_Pin;
 8000706:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800070a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(my_Led_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	4619      	mov	r1, r3
 800071e:	4808      	ldr	r0, [pc, #32]	@ (8000740 <MX_GPIO_Init+0xc0>)
 8000720:	f001 fa0e 	bl	8001b40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	2028      	movs	r0, #40	@ 0x28
 800072a:	f000 fac4 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800072e:	2028      	movs	r0, #40	@ 0x28
 8000730:	f000 fadd 	bl	8000cee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	48000400 	.word	0x48000400
 8000744:	48000800 	.word	0x48000800

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <Error_Handler+0x8>

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <HAL_MspInit+0x44>)
 800075c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800075e:	4a0e      	ldr	r2, [pc, #56]	@ (8000798 <HAL_MspInit+0x44>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6613      	str	r3, [r2, #96]	@ 0x60
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <HAL_MspInit+0x44>)
 8000768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <HAL_MspInit+0x44>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000776:	4a08      	ldr	r2, [pc, #32]	@ (8000798 <HAL_MspInit+0x44>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077c:	6593      	str	r3, [r2, #88]	@ 0x58
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <HAL_MspInit+0x44>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000868 <HAL_DAC_MspInit+0xcc>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d14f      	bne.n	800085e <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007be:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <HAL_DAC_MspInit+0xd0>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c2:	4a2a      	ldr	r2, [pc, #168]	@ (800086c <HAL_DAC_MspInit+0xd0>)
 80007c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80007c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ca:	4b28      	ldr	r3, [pc, #160]	@ (800086c <HAL_DAC_MspInit+0xd0>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b25      	ldr	r3, [pc, #148]	@ (800086c <HAL_DAC_MspInit+0xd0>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a24      	ldr	r2, [pc, #144]	@ (800086c <HAL_DAC_MspInit+0xd0>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4b22      	ldr	r3, [pc, #136]	@ (800086c <HAL_DAC_MspInit+0xd0>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007ee:	2330      	movs	r3, #48	@ 0x30
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f2:	2303      	movs	r3, #3
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000804:	f001 f99c 	bl	8001b40 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8000808:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <HAL_DAC_MspInit+0xd4>)
 800080a:	4a1a      	ldr	r2, [pc, #104]	@ (8000874 <HAL_DAC_MspInit+0xd8>)
 800080c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <HAL_DAC_MspInit+0xd4>)
 8000810:	2206      	movs	r2, #6
 8000812:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <HAL_DAC_MspInit+0xd4>)
 8000816:	2210      	movs	r2, #16
 8000818:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <HAL_DAC_MspInit+0xd4>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <HAL_DAC_MspInit+0xd4>)
 8000822:	2280      	movs	r2, #128	@ 0x80
 8000824:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_DAC_MspInit+0xd4>)
 8000828:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800082c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <HAL_DAC_MspInit+0xd4>)
 8000830:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000834:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <HAL_DAC_MspInit+0xd4>)
 8000838:	2220      	movs	r2, #32
 800083a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <HAL_DAC_MspInit+0xd4>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000842:	480b      	ldr	r0, [pc, #44]	@ (8000870 <HAL_DAC_MspInit+0xd4>)
 8000844:	f000 feae 	bl	80015a4 <HAL_DMA_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800084e:	f7ff ff7b 	bl	8000748 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a06      	ldr	r2, [pc, #24]	@ (8000870 <HAL_DAC_MspInit+0xd4>)
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <HAL_DAC_MspInit+0xd4>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	@ 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40007400 	.word	0x40007400
 800086c:	40021000 	.word	0x40021000
 8000870:	20000070 	.word	0x20000070
 8000874:	40020008 	.word	0x40020008

08000878 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000888:	d113      	bne.n	80008b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <HAL_TIM_Base_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088e:	4a0b      	ldr	r2, [pc, #44]	@ (80008bc <HAL_TIM_Base_MspInit+0x44>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6593      	str	r3, [r2, #88]	@ 0x58
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <HAL_TIM_Base_MspInit+0x44>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	201c      	movs	r0, #28
 80008a8:	f000 fa05 	bl	8000cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008ac:	201c      	movs	r0, #28
 80008ae:	f000 fa1e 	bl	8000cee <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <NMI_Handler+0x4>

080008c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <MemManage_Handler+0x4>

080008d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 f8af 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <DMA1_Channel1_IRQHandler+0x10>)
 8000926:	f000 ffbc 	bl	80018a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000070 	.word	0x20000070

08000934 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000938:	4802      	ldr	r0, [pc, #8]	@ (8000944 <TIM2_IRQHandler+0x10>)
 800093a:	f002 fb15 	bl	8002f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000d0 	.word	0x200000d0

08000948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(my_Button_Pin);
 800094c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000950:	f001 faba 	bl	8001ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000980:	f7ff ffea 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	@ (80009bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	@ (80009c8 <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f002 ff13 	bl	80037d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ae:	f7ff fc8d 	bl	80002cc <main>

080009b2 <LoopForever>:

LoopForever:
    b LoopForever
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009b4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80009c0:	08004080 	.word	0x08004080
  ldr r2, =_sbss
 80009c4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80009c8:	200001f8 	.word	0x200001f8

080009cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_IRQHandler>

080009ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009d4:	2300      	movs	r3, #0
 80009d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f961 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009de:	2000      	movs	r0, #0
 80009e0:	f000 f80e 	bl	8000a00 <HAL_InitTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	e001      	b.n	80009f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f0:	f7ff feb0 	bl	8000754 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <HAL_InitTick+0x6c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d023      	beq.n	8000a5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a14:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <HAL_InitTick+0x70>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <HAL_InitTick+0x6c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f96d 	bl	8000d0a <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10f      	bne.n	8000a56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d809      	bhi.n	8000a50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f000 f937 	bl	8000cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a48:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <HAL_InitTick+0x74>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e007      	b.n	8000a60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	e004      	b.n	8000a60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	e001      	b.n	8000a60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000014 	.word	0x20000014
 8000a70:	2000000c 	.word	0x2000000c
 8000a74:	20000010 	.word	0x20000010

08000a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_IncTick+0x20>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_IncTick+0x24>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a04      	ldr	r2, [pc, #16]	@ (8000a9c <HAL_IncTick+0x24>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000014 	.word	0x20000014
 8000a9c:	200001f4 	.word	0x200001f4

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <HAL_GetTick+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	200001f4 	.word	0x200001f4

08000ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac0:	f7ff ffee 	bl	8000aa0 <HAL_GetTick>
 8000ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad0:	d005      	beq.n	8000ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <HAL_Delay+0x44>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ade:	bf00      	nop
 8000ae0:	f7ff ffde 	bl	8000aa0 <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8f7      	bhi.n	8000ae0 <HAL_Delay+0x28>
  {
  }
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000014 	.word	0x20000014

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	@ (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	@ (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	@ (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	@ 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	@ 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f7ff ff8e 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff29 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff3e 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff8e 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5d 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff31 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa2 	bl	8000c5c <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d101      	bne.n	8000d34 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e014      	b.n	8000d5e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	791b      	ldrb	r3, [r3, #4]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d105      	bne.n	8000d4a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fd29 	bl	800079c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	795b      	ldrb	r3, [r3, #5]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d101      	bne.n	8000d86 <HAL_DAC_Start_DMA+0x1e>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e0ab      	b.n	8000ede <HAL_DAC_Start_DMA+0x176>
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2202      	movs	r2, #2
 8000d90:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d12f      	bne.n	8000df8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	4a52      	ldr	r2, [pc, #328]	@ (8000ee8 <HAL_DAC_Start_DMA+0x180>)
 8000d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4a51      	ldr	r2, [pc, #324]	@ (8000eec <HAL_DAC_Start_DMA+0x184>)
 8000da6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	4a50      	ldr	r2, [pc, #320]	@ (8000ef0 <HAL_DAC_Start_DMA+0x188>)
 8000dae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000dbe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d013      	beq.n	8000dee <HAL_DAC_Start_DMA+0x86>
 8000dc6:	6a3b      	ldr	r3, [r7, #32]
 8000dc8:	2b08      	cmp	r3, #8
 8000dca:	d845      	bhi.n	8000e58 <HAL_DAC_Start_DMA+0xf0>
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_DAC_Start_DMA+0x72>
 8000dd2:	6a3b      	ldr	r3, [r7, #32]
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d005      	beq.n	8000de4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000dd8:	e03e      	b.n	8000e58 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3308      	adds	r3, #8
 8000de0:	613b      	str	r3, [r7, #16]
        break;
 8000de2:	e03c      	b.n	8000e5e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	330c      	adds	r3, #12
 8000dea:	613b      	str	r3, [r7, #16]
        break;
 8000dec:	e037      	b.n	8000e5e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3310      	adds	r3, #16
 8000df4:	613b      	str	r3, [r7, #16]
        break;
 8000df6:	e032      	b.n	8000e5e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	4a3d      	ldr	r2, [pc, #244]	@ (8000ef4 <HAL_DAC_Start_DMA+0x18c>)
 8000dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	4a3c      	ldr	r2, [pc, #240]	@ (8000ef8 <HAL_DAC_Start_DMA+0x190>)
 8000e06:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	4a3b      	ldr	r2, [pc, #236]	@ (8000efc <HAL_DAC_Start_DMA+0x194>)
 8000e0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e1e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d013      	beq.n	8000e4e <HAL_DAC_Start_DMA+0xe6>
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	d817      	bhi.n	8000e5c <HAL_DAC_Start_DMA+0xf4>
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_DAC_Start_DMA+0xd2>
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d005      	beq.n	8000e44 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000e38:	e010      	b.n	8000e5c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3314      	adds	r3, #20
 8000e40:	613b      	str	r3, [r7, #16]
        break;
 8000e42:	e00c      	b.n	8000e5e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3318      	adds	r3, #24
 8000e4a:	613b      	str	r3, [r7, #16]
        break;
 8000e4c:	e007      	b.n	8000e5e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	331c      	adds	r3, #28
 8000e54:	613b      	str	r3, [r7, #16]
        break;
 8000e56:	e002      	b.n	8000e5e <HAL_DAC_Start_DMA+0xf6>
        break;
 8000e58:	bf00      	nop
 8000e5a:	e000      	b.n	8000e5e <HAL_DAC_Start_DMA+0xf6>
        break;
 8000e5c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d111      	bne.n	8000e88 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000e72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6898      	ldr	r0, [r3, #8]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	f000 fc39 	bl	80016f4 <HAL_DMA_Start_IT>
 8000e82:	4603      	mov	r3, r0
 8000e84:	75fb      	strb	r3, [r7, #23]
 8000e86:	e010      	b.n	8000eaa <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000e96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	68d8      	ldr	r0, [r3, #12]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	f000 fc27 	bl	80016f4 <HAL_DMA_Start_IT>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2200      	movs	r2, #0
 8000eae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10c      	bne.n	8000ed0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6819      	ldr	r1, [r3, #0]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	f003 0310 	and.w	r3, r3, #16
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	409a      	lsls	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e005      	b.n	8000edc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	f043 0204 	orr.w	r2, r3, #4
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	08001261 	.word	0x08001261
 8000eec:	08001283 	.word	0x08001283
 8000ef0:	0800129f 	.word	0x0800129f
 8000ef4:	08001537 	.word	0x08001537
 8000ef8:	08001559 	.word	0x08001559
 8000efc:	08001575 	.word	0x08001575

08000f00 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6819      	ldr	r1, [r3, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	400a      	ands	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6819      	ldr	r1, [r3, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	2201      	movs	r2, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	400a      	ands	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10d      	bne.n	8000f66 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fc4b 	bl	80017ea <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	e00c      	b.n	8000f80 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fc3d 	bl	80017ea <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8000f7e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	795b      	ldrb	r3, [r3, #5]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d101      	bne.n	8000fe4 <HAL_DAC_ConfigChannel+0x1c>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e137      	b.n	8001254 <HAL_DAC_ConfigChannel+0x28c>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2202      	movs	r2, #2
 8000fee:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	f040 8081 	bne.w	80010fc <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000ffa:	f7ff fd51 	bl	8000aa0 <HAL_GetTick>
 8000ffe:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d140      	bne.n	8001088 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001006:	e018      	b.n	800103a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001008:	f7ff fd4a 	bl	8000aa0 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d911      	bls.n	800103a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800101c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00a      	beq.n	800103a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	f043 0208 	orr.w	r2, r3, #8
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2203      	movs	r2, #3
 8001034:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e10c      	b.n	8001254 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001040:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1df      	bne.n	8001008 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff fd35 	bl	8000ab8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	69d2      	ldr	r2, [r2, #28]
 8001056:	641a      	str	r2, [r3, #64]	@ 0x40
 8001058:	e023      	b.n	80010a2 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800105a:	f7ff fd21 	bl	8000aa0 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d90f      	bls.n	8001088 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800106e:	2b00      	cmp	r3, #0
 8001070:	da0a      	bge.n	8001088 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	f043 0208 	orr.w	r2, r3, #8
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2203      	movs	r2, #3
 8001082:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e0e5      	b.n	8001254 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800108e:	2b00      	cmp	r3, #0
 8001090:	dbe3      	blt.n	800105a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001092:	2001      	movs	r0, #1
 8001094:	f7ff fd10 	bl	8000ab8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	69d2      	ldr	r2, [r2, #28]
 80010a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	ea02 0103 	and.w	r1, r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	6a1a      	ldr	r2, [r3, #32]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	409a      	lsls	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	21ff      	movs	r1, #255	@ 0xff
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	ea02 0103 	and.w	r1, r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	409a      	lsls	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d11d      	bne.n	8001140 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800110a:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	221f      	movs	r2, #31
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	4013      	ands	r3, r2
 800111e:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f003 0310 	and.w	r3, r3, #16
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69fa      	ldr	r2, [r7, #28]
 8001134:	4313      	orrs	r3, r2
 8001136:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001146:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2207      	movs	r2, #7
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	4013      	ands	r3, r2
 800115a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	431a      	orrs	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	4313      	orrs	r3, r2
 800117e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6819      	ldr	r1, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43da      	mvns	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80011e4:	d104      	bne.n	80011f0 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e018      	b.n	8001222 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d104      	bne.n	8001202 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	e00f      	b.n	8001222 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001202:	f001 fd1d 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8001206:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4a14      	ldr	r2, [pc, #80]	@ (800125c <HAL_DAC_ConfigChannel+0x294>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d904      	bls.n	800121a <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	e003      	b.n	8001222 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001220:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6819      	ldr	r1, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	22c0      	movs	r2, #192	@ 0xc0
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43da      	mvns	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	400a      	ands	r2, r1
 8001244:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2201      	movs	r2, #1
 800124a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	04c4b400 	.word	0x04c4b400

08001260 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff fe8b 	bl	8000f8a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2201      	movs	r2, #1
 8001278:	711a      	strb	r2, [r3, #4]
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff fe84 	bl	8000f9e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	f043 0204 	orr.w	r2, r3, #4
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f7ff fe7a 	bl	8000fb2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2201      	movs	r2, #1
 80012c2:	711a      	strb	r2, [r3, #4]
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

 /* Check the DAC handle allocation */
 /* Check if DAC running */
  if (hdac == NULL)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d103      	bne.n	8001328 <HAL_DACEx_SelfCalibrate+0x20>
  {
    status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001326:	e100      	b.n	800152a <HAL_DACEx_SelfCalibrate+0x222>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	791b      	ldrb	r3, [r3, #4]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d103      	bne.n	800133a <HAL_DACEx_SelfCalibrate+0x32>
  {
    status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001338:	e0f7      	b.n	800152a <HAL_DACEx_SelfCalibrate+0x222>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	795b      	ldrb	r3, [r3, #5]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_DACEx_SelfCalibrate+0x3e>
 8001342:	2302      	movs	r3, #2
 8001344:	e0f3      	b.n	800152e <HAL_DACEx_SelfCalibrate+0x226>
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2201      	movs	r2, #1
 800134a:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f003 0310 	and.w	r3, r3, #16
 8001358:	2107      	movs	r1, #7
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6819      	ldr	r1, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2201      	movs	r2, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43da      	mvns	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	400a      	ands	r2, r1
 800137c:	601a      	str	r2, [r3, #0]

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43da      	mvns	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	400a      	ands	r2, r1
 8001398:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	617b      	str	r3, [r7, #20]

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
    if(Channel == DAC_CHANNEL_1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d103      	bne.n	80013ae <HAL_DACEx_SelfCalibrate+0xa6>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3308      	adds	r3, #8
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e002      	b.n	80013b4 <HAL_DACEx_SelfCalibrate+0xac>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3314      	adds	r3, #20
 80013b2:	617b      	str	r3, [r7, #20]
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
#if defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
    tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
#endif /* STM32L451xx STM32L452xx STM32L462xx */
    *(__IO uint32_t *) tmp = 0x0800U;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	461a      	mov	r2, r3
 80013b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013bc:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6819      	ldr	r1, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 80013d8:	2310      	movs	r3, #16
 80013da:	623b      	str	r3, [r7, #32]
    delta = 8U;
 80013dc:	2308      	movs	r3, #8
 80013de:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 80013e0:	e037      	b.n	8001452 <HAL_DACEx_SelfCalibrate+0x14a>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	211f      	movs	r1, #31
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	ea02 0103 	and.w	r1, r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	6a3a      	ldr	r2, [r7, #32]
 8001402:	409a      	lsls	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff fb53 	bl	8000ab8 <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	401a      	ands	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	429a      	cmp	r2, r3
 8001438:	d104      	bne.n	8001444 <HAL_DACEx_SelfCalibrate+0x13c>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 800143a:	6a3a      	ldr	r2, [r7, #32]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	623b      	str	r3, [r7, #32]
 8001442:	e003      	b.n	800144c <HAL_DACEx_SelfCalibrate+0x144>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8001444:	6a3a      	ldr	r2, [r7, #32]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	085b      	lsrs	r3, r3, #1
 8001450:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1c4      	bne.n	80013e2 <HAL_DACEx_SelfCalibrate+0xda>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	211f      	movs	r1, #31
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	ea02 0103 	and.w	r1, r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	6a3a      	ldr	r2, [r7, #32]
 8001478:	409a      	lsls	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	639a      	str	r2, [r3, #56]	@ 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff fb18 	bl	8000ab8 <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d11a      	bne.n	80014d8 <HAL_DACEx_SelfCalibrate+0x1d0>
    {
      /* Check trimming value below maximum */
      if (trimmingvalue < 0x1FU)
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	2b1e      	cmp	r3, #30
 80014a6:	d817      	bhi.n	80014d8 <HAL_DACEx_SelfCalibrate+0x1d0>
      {
        /* Trimming is actually one value more */
        trimmingvalue++;
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	3301      	adds	r3, #1
 80014ac:	623b      	str	r3, [r7, #32]

        /* Set right trimming */
        MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	211f      	movs	r1, #31
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	ea02 0103 	and.w	r1, r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	6a3a      	ldr	r2, [r7, #32]
 80014ce:	409a      	lsls	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6819      	ldr	r1, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f003 0310 	and.w	r3, r3, #16
 80014e4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43da      	mvns	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	400a      	ands	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	6a3a      	ldr	r2, [r7, #32]
 80014fa:	619a      	str	r2, [r3, #24]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2201      	movs	r2, #1
 8001500:	615a      	str	r2, [r3, #20]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	2107      	movs	r1, #7
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	ea02 0103 	and.w	r1, r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	430a      	orrs	r2, r1
 8001522:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2200      	movs	r2, #0
 8001528:	715a      	strb	r2, [r3, #5]
  }

  return status;
 800152a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800152e:	4618      	mov	r0, r3
 8001530:	3728      	adds	r7, #40	@ 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001542:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f7ff fec1 	bl	80012cc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2201      	movs	r2, #1
 800154e:	711a      	strb	r2, [r3, #4]
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f7ff feba 	bl	80012e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001580:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	f043 0204 	orr.w	r2, r3, #4
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f7ff feb0 	bl	80012f4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	711a      	strb	r2, [r3, #4]
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e08d      	b.n	80016d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b47      	ldr	r3, [pc, #284]	@ (80016dc <HAL_DMA_Init+0x138>)
 80015be:	429a      	cmp	r2, r3
 80015c0:	d80f      	bhi.n	80015e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b45      	ldr	r3, [pc, #276]	@ (80016e0 <HAL_DMA_Init+0x13c>)
 80015ca:	4413      	add	r3, r2
 80015cc:	4a45      	ldr	r2, [pc, #276]	@ (80016e4 <HAL_DMA_Init+0x140>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	009a      	lsls	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a42      	ldr	r2, [pc, #264]	@ (80016e8 <HAL_DMA_Init+0x144>)
 80015de:	641a      	str	r2, [r3, #64]	@ 0x40
 80015e0:	e00e      	b.n	8001600 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b40      	ldr	r3, [pc, #256]	@ (80016ec <HAL_DMA_Init+0x148>)
 80015ea:	4413      	add	r3, r2
 80015ec:	4a3d      	ldr	r2, [pc, #244]	@ (80016e4 <HAL_DMA_Init+0x140>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	009a      	lsls	r2, r3, #2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a3c      	ldr	r2, [pc, #240]	@ (80016f0 <HAL_DMA_Init+0x14c>)
 80015fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800161a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800163c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fa12 	bl	8001a7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001660:	d102      	bne.n	8001668 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800167c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d010      	beq.n	80016a8 <HAL_DMA_Init+0x104>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b04      	cmp	r3, #4
 800168c:	d80c      	bhi.n	80016a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fa32 	bl	8001af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	e008      	b.n	80016ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40020407 	.word	0x40020407
 80016e0:	bffdfff8 	.word	0xbffdfff8
 80016e4:	cccccccd 	.word	0xcccccccd
 80016e8:	40020000 	.word	0x40020000
 80016ec:	bffdfbf8 	.word	0xbffdfbf8
 80016f0:	40020400 	.word	0x40020400

080016f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_DMA_Start_IT+0x20>
 8001710:	2302      	movs	r3, #2
 8001712:	e066      	b.n	80017e2 <HAL_DMA_Start_IT+0xee>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b01      	cmp	r3, #1
 8001726:	d155      	bne.n	80017d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0201 	bic.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 f957 	bl	8001a00 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	2b00      	cmp	r3, #0
 8001758:	d008      	beq.n	800176c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 020e 	orr.w	r2, r2, #14
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e00f      	b.n	800178c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0204 	bic.w	r2, r2, #4
 800177a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 020a 	orr.w	r2, r2, #10
 800178a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017c0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e005      	b.n	80017e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
 80017de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d008      	beq.n	8001814 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2204      	movs	r2, #4
 8001806:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e040      	b.n	8001896 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 020e 	bic.w	r2, r2, #14
 8001822:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800182e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001832:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001848:	f003 021c 	and.w	r2, r3, #28
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001860:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00c      	beq.n	8001884 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001878:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001882:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	f003 031c 	and.w	r3, r3, #28
 80018c2:	2204      	movs	r2, #4
 80018c4:	409a      	lsls	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d026      	beq.n	800191c <HAL_DMA_IRQHandler+0x7a>
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d021      	beq.n	800191c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0320 	and.w	r3, r3, #32
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d107      	bne.n	80018f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0204 	bic.w	r2, r2, #4
 80018f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f003 021c 	and.w	r2, r3, #28
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	2104      	movs	r1, #4
 8001904:	fa01 f202 	lsl.w	r2, r1, r2
 8001908:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	2b00      	cmp	r3, #0
 8001910:	d071      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800191a:	e06c      	b.n	80019f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001920:	f003 031c 	and.w	r3, r3, #28
 8001924:	2202      	movs	r2, #2
 8001926:	409a      	lsls	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d02e      	beq.n	800198e <HAL_DMA_IRQHandler+0xec>
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d029      	beq.n	800198e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10b      	bne.n	8001960 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 020a 	bic.w	r2, r2, #10
 8001956:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001964:	f003 021c 	and.w	r2, r3, #28
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	2102      	movs	r1, #2
 800196e:	fa01 f202 	lsl.w	r2, r1, r2
 8001972:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d038      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800198c:	e033      	b.n	80019f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f003 031c 	and.w	r3, r3, #28
 8001996:	2208      	movs	r2, #8
 8001998:	409a      	lsls	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d02a      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x156>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d025      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 020e 	bic.w	r2, r2, #14
 80019ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c0:	f003 021c 	and.w	r2, r3, #28
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	2101      	movs	r1, #1
 80019ca:	fa01 f202 	lsl.w	r2, r1, r2
 80019ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
}
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a16:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a28:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	f003 021c 	and.w	r2, r3, #28
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d108      	bne.n	8001a60 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a5e:	e007      	b.n	8001a70 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d80a      	bhi.n	8001aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a9c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6493      	str	r3, [r2, #72]	@ 0x48
 8001aa4:	e007      	b.n	8001ab6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	009a      	lsls	r2, r3, #2
 8001aae:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ab0:	4413      	add	r3, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3b08      	subs	r3, #8
 8001abe:	4a0c      	ldr	r2, [pc, #48]	@ (8001af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001acc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40020407 	.word	0x40020407
 8001aec:	4002081c 	.word	0x4002081c
 8001af0:	cccccccd 	.word	0xcccccccd
 8001af4:	40020880 	.word	0x40020880

08001af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	461a      	mov	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a08      	ldr	r2, [pc, #32]	@ (8001b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b1a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2201      	movs	r2, #1
 8001b26:	409a      	lsls	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	1000823f 	.word	0x1000823f
 8001b3c:	40020940 	.word	0x40020940

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4e:	e166      	b.n	8001e1e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2101      	movs	r1, #1
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8158 	beq.w	8001e18 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d005      	beq.n	8001b80 <HAL_GPIO_Init+0x40>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d130      	bne.n	8001be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	f003 0201 	and.w	r2, r3, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d017      	beq.n	8001c1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d123      	bne.n	8001c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	08da      	lsrs	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3208      	adds	r2, #8
 8001c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	08da      	lsrs	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3208      	adds	r2, #8
 8001c6c:	6939      	ldr	r1, [r7, #16]
 8001c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0203 	and.w	r2, r3, #3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80b2 	beq.w	8001e18 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb4:	4b61      	ldr	r3, [pc, #388]	@ (8001e3c <HAL_GPIO_Init+0x2fc>)
 8001cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb8:	4a60      	ldr	r2, [pc, #384]	@ (8001e3c <HAL_GPIO_Init+0x2fc>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e3c <HAL_GPIO_Init+0x2fc>)
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ccc:	4a5c      	ldr	r2, [pc, #368]	@ (8001e40 <HAL_GPIO_Init+0x300>)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cf6:	d02b      	beq.n	8001d50 <HAL_GPIO_Init+0x210>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a52      	ldr	r2, [pc, #328]	@ (8001e44 <HAL_GPIO_Init+0x304>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d025      	beq.n	8001d4c <HAL_GPIO_Init+0x20c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a51      	ldr	r2, [pc, #324]	@ (8001e48 <HAL_GPIO_Init+0x308>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d01f      	beq.n	8001d48 <HAL_GPIO_Init+0x208>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a50      	ldr	r2, [pc, #320]	@ (8001e4c <HAL_GPIO_Init+0x30c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d019      	beq.n	8001d44 <HAL_GPIO_Init+0x204>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a4f      	ldr	r2, [pc, #316]	@ (8001e50 <HAL_GPIO_Init+0x310>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d013      	beq.n	8001d40 <HAL_GPIO_Init+0x200>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a4e      	ldr	r2, [pc, #312]	@ (8001e54 <HAL_GPIO_Init+0x314>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d00d      	beq.n	8001d3c <HAL_GPIO_Init+0x1fc>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a4d      	ldr	r2, [pc, #308]	@ (8001e58 <HAL_GPIO_Init+0x318>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d007      	beq.n	8001d38 <HAL_GPIO_Init+0x1f8>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a4c      	ldr	r2, [pc, #304]	@ (8001e5c <HAL_GPIO_Init+0x31c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_GPIO_Init+0x1f4>
 8001d30:	2307      	movs	r3, #7
 8001d32:	e00e      	b.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d34:	2308      	movs	r3, #8
 8001d36:	e00c      	b.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d38:	2306      	movs	r3, #6
 8001d3a:	e00a      	b.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	e008      	b.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d40:	2304      	movs	r3, #4
 8001d42:	e006      	b.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d44:	2303      	movs	r3, #3
 8001d46:	e004      	b.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e002      	b.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d50:	2300      	movs	r3, #0
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	f002 0203 	and.w	r2, r2, #3
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	4093      	lsls	r3, r2
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d62:	4937      	ldr	r1, [pc, #220]	@ (8001e40 <HAL_GPIO_Init+0x300>)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d70:	4b3b      	ldr	r3, [pc, #236]	@ (8001e60 <HAL_GPIO_Init+0x320>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d94:	4a32      	ldr	r2, [pc, #200]	@ (8001e60 <HAL_GPIO_Init+0x320>)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d9a:	4b31      	ldr	r3, [pc, #196]	@ (8001e60 <HAL_GPIO_Init+0x320>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dbe:	4a28      	ldr	r2, [pc, #160]	@ (8001e60 <HAL_GPIO_Init+0x320>)
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dc4:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <HAL_GPIO_Init+0x320>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001de8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e60 <HAL_GPIO_Init+0x320>)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <HAL_GPIO_Init+0x320>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e12:	4a13      	ldr	r2, [pc, #76]	@ (8001e60 <HAL_GPIO_Init+0x320>)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f47f ae91 	bne.w	8001b50 <HAL_GPIO_Init+0x10>
  }
}
 8001e2e:	bf00      	nop
 8001e30:	bf00      	nop
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010000 	.word	0x40010000
 8001e44:	48000400 	.word	0x48000400
 8001e48:	48000800 	.word	0x48000800
 8001e4c:	48000c00 	.word	0x48000c00
 8001e50:	48001000 	.word	0x48001000
 8001e54:	48001400 	.word	0x48001400
 8001e58:	48001800 	.word	0x48001800
 8001e5c:	48001c00 	.word	0x48001c00
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e80:	e002      	b.n	8001e88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43d9      	mvns	r1, r3
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	400b      	ands	r3, r1
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	619a      	str	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ed2:	4b08      	ldr	r3, [pc, #32]	@ (8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ede:	4a05      	ldr	r2, [pc, #20]	@ (8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe f988 	bl	80001fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001efc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f08:	d102      	bne.n	8001f10 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f0e:	e00b      	b.n	8001f28 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001f10:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f1e:	d102      	bne.n	8001f26 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001f20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f24:	e000      	b.n	8001f28 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001f26:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40007000 	.word	0x40007000

08001f38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d141      	bne.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f46:	4b4b      	ldr	r3, [pc, #300]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f52:	d131      	bne.n	8001fb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f54:	4b47      	ldr	r3, [pc, #284]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f5a:	4a46      	ldr	r2, [pc, #280]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f64:	4b43      	ldr	r3, [pc, #268]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f6c:	4a41      	ldr	r2, [pc, #260]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f74:	4b40      	ldr	r3, [pc, #256]	@ (8002078 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2232      	movs	r2, #50	@ 0x32
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800207c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f80:	fba2 2303 	umull	r2, r3, r2, r3
 8001f84:	0c9b      	lsrs	r3, r3, #18
 8001f86:	3301      	adds	r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f8a:	e002      	b.n	8001f92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f92:	4b38      	ldr	r3, [pc, #224]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f9e:	d102      	bne.n	8001fa6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f2      	bne.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fa6:	4b33      	ldr	r3, [pc, #204]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb2:	d158      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e057      	b.n	8002068 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fbe:	4a2d      	ldr	r2, [pc, #180]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fc8:	e04d      	b.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fd0:	d141      	bne.n	8002056 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fd2:	4b28      	ldr	r3, [pc, #160]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fde:	d131      	bne.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fe0:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fe6:	4a23      	ldr	r2, [pc, #140]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff0:	4b20      	ldr	r3, [pc, #128]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ffe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002000:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2232      	movs	r2, #50	@ 0x32
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	4a1c      	ldr	r2, [pc, #112]	@ (800207c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	0c9b      	lsrs	r3, r3, #18
 8002012:	3301      	adds	r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002016:	e002      	b.n	800201e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3b01      	subs	r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800202a:	d102      	bne.n	8002032 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f2      	bne.n	8002018 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203e:	d112      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e011      	b.n	8002068 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002044:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002050:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002054:	e007      	b.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002056:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800205e:	4a05      	ldr	r2, [pc, #20]	@ (8002074 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002064:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40007000 	.word	0x40007000
 8002078:	2000000c 	.word	0x2000000c
 800207c:	431bde83 	.word	0x431bde83

08002080 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	f000 bc08 	b.w	80028a4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002094:	4b96      	ldr	r3, [pc, #600]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209e:	4b94      	ldr	r3, [pc, #592]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80e4 	beq.w	800227e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_RCC_OscConfig+0x4c>
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	f040 808b 	bne.w	80021da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	f040 8087 	bne.w	80021da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020cc:	4b88      	ldr	r3, [pc, #544]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_OscConfig+0x64>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e3df      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	4b81      	ldr	r3, [pc, #516]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_RCC_OscConfig+0x7e>
 80020f4:	4b7e      	ldr	r3, [pc, #504]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020fc:	e005      	b.n	800210a <HAL_RCC_OscConfig+0x8a>
 80020fe:	4b7c      	ldr	r3, [pc, #496]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800210a:	4293      	cmp	r3, r2
 800210c:	d223      	bcs.n	8002156 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fda0 	bl	8002c58 <RCC_SetFlashLatencyFromMSIRange>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e3c0      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002122:	4b73      	ldr	r3, [pc, #460]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a72      	ldr	r2, [pc, #456]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b70      	ldr	r3, [pc, #448]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	496d      	ldr	r1, [pc, #436]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002140:	4b6b      	ldr	r3, [pc, #428]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	4968      	ldr	r1, [pc, #416]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
 8002154:	e025      	b.n	80021a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002156:	4b66      	ldr	r3, [pc, #408]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a65      	ldr	r2, [pc, #404]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 800215c:	f043 0308 	orr.w	r3, r3, #8
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b63      	ldr	r3, [pc, #396]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4960      	ldr	r1, [pc, #384]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002174:	4b5e      	ldr	r3, [pc, #376]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	495b      	ldr	r1, [pc, #364]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fd60 	bl	8002c58 <RCC_SetFlashLatencyFromMSIRange>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e380      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a2:	f000 fcc1 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b51      	ldr	r3, [pc, #324]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	4950      	ldr	r1, [pc, #320]	@ (80022f4 <HAL_RCC_OscConfig+0x274>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a4e      	ldr	r2, [pc, #312]	@ (80022f8 <HAL_RCC_OscConfig+0x278>)
 80021c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021c2:	4b4e      	ldr	r3, [pc, #312]	@ (80022fc <HAL_RCC_OscConfig+0x27c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fc1a 	bl	8000a00 <HAL_InitTick>
 80021cc:	4603      	mov	r3, r0
 80021ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d052      	beq.n	800227c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	e364      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d032      	beq.n	8002248 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021e2:	4b43      	ldr	r3, [pc, #268]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a42      	ldr	r2, [pc, #264]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ee:	f7fe fc57 	bl	8000aa0 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f6:	f7fe fc53 	bl	8000aa0 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e34d      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002208:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002214:	4b36      	ldr	r3, [pc, #216]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a35      	ldr	r2, [pc, #212]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 800221a:	f043 0308 	orr.w	r3, r3, #8
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b33      	ldr	r3, [pc, #204]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4930      	ldr	r1, [pc, #192]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002232:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	492b      	ldr	r1, [pc, #172]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
 8002246:	e01a      	b.n	800227e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002248:	4b29      	ldr	r3, [pc, #164]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a28      	ldr	r2, [pc, #160]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002254:	f7fe fc24 	bl	8000aa0 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800225c:	f7fe fc20 	bl	8000aa0 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e31a      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800226e:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x1dc>
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800227c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d073      	beq.n	8002372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d005      	beq.n	800229c <HAL_RCC_OscConfig+0x21c>
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d10e      	bne.n	80022b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d10b      	bne.n	80022b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d063      	beq.n	8002370 <HAL_RCC_OscConfig+0x2f0>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d15f      	bne.n	8002370 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e2f7      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x24c>
 80022be:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a0b      	ldr	r2, [pc, #44]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e025      	b.n	8002318 <HAL_RCC_OscConfig+0x298>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022d4:	d114      	bne.n	8002300 <HAL_RCC_OscConfig+0x280>
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a05      	ldr	r2, [pc, #20]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b03      	ldr	r3, [pc, #12]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a02      	ldr	r2, [pc, #8]	@ (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e013      	b.n	8002318 <HAL_RCC_OscConfig+0x298>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08003834 	.word	0x08003834
 80022f8:	2000000c 	.word	0x2000000c
 80022fc:	20000010 	.word	0x20000010
 8002300:	4ba0      	ldr	r3, [pc, #640]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a9f      	ldr	r2, [pc, #636]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b9d      	ldr	r3, [pc, #628]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a9c      	ldr	r2, [pc, #624]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe fbbe 	bl	8000aa0 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7fe fbba 	bl	8000aa0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	@ 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e2b4      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233a:	4b92      	ldr	r3, [pc, #584]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x2a8>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fbaa 	bl	8000aa0 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe fba6 	bl	8000aa0 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e2a0      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002362:	4b88      	ldr	r3, [pc, #544]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x2d0>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d060      	beq.n	8002440 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d005      	beq.n	8002390 <HAL_RCC_OscConfig+0x310>
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d119      	bne.n	80023be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d116      	bne.n	80023be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002390:	4b7c      	ldr	r3, [pc, #496]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_OscConfig+0x328>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e27d      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4b76      	ldr	r3, [pc, #472]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	4973      	ldr	r1, [pc, #460]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023bc:	e040      	b.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d023      	beq.n	800240e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe fb65 	bl	8000aa0 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023da:	f7fe fb61 	bl	8000aa0 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e25b      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ec:	4b65      	ldr	r3, [pc, #404]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f8:	4b62      	ldr	r3, [pc, #392]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	495f      	ldr	r1, [pc, #380]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
 800240c:	e018      	b.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240e:	4b5d      	ldr	r3, [pc, #372]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a5c      	ldr	r2, [pc, #368]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe fb41 	bl	8000aa0 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7fe fb3d 	bl	8000aa0 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e237      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002434:	4b53      	ldr	r3, [pc, #332]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d03c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01c      	beq.n	800248e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002454:	4b4b      	ldr	r3, [pc, #300]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800245a:	4a4a      	ldr	r2, [pc, #296]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7fe fb1c 	bl	8000aa0 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7fe fb18 	bl	8000aa0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e212      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800247e:	4b41      	ldr	r3, [pc, #260]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002480:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ef      	beq.n	800246c <HAL_RCC_OscConfig+0x3ec>
 800248c:	e01b      	b.n	80024c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248e:	4b3d      	ldr	r3, [pc, #244]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002494:	4a3b      	ldr	r2, [pc, #236]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe faff 	bl	8000aa0 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a6:	f7fe fafb 	bl	8000aa0 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1f5      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b8:	4b32      	ldr	r3, [pc, #200]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 80024ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1ef      	bne.n	80024a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80a6 	beq.w	8002620 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10d      	bne.n	8002500 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b27      	ldr	r3, [pc, #156]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e8:	4a26      	ldr	r2, [pc, #152]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80024f0:	4b24      	ldr	r3, [pc, #144]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002500:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <HAL_RCC_OscConfig+0x508>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d118      	bne.n	800253e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800250c:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <HAL_RCC_OscConfig+0x508>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1d      	ldr	r2, [pc, #116]	@ (8002588 <HAL_RCC_OscConfig+0x508>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002518:	f7fe fac2 	bl	8000aa0 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002520:	f7fe fabe 	bl	8000aa0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1b8      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_RCC_OscConfig+0x508>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d108      	bne.n	8002558 <HAL_RCC_OscConfig+0x4d8>
 8002546:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254c:	4a0d      	ldr	r2, [pc, #52]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002556:	e029      	b.n	80025ac <HAL_RCC_OscConfig+0x52c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d115      	bne.n	800258c <HAL_RCC_OscConfig+0x50c>
 8002560:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002566:	4a07      	ldr	r2, [pc, #28]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002570:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002576:	4a03      	ldr	r2, [pc, #12]	@ (8002584 <HAL_RCC_OscConfig+0x504>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002580:	e014      	b.n	80025ac <HAL_RCC_OscConfig+0x52c>
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	40007000 	.word	0x40007000
 800258c:	4b9d      	ldr	r3, [pc, #628]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002592:	4a9c      	ldr	r2, [pc, #624]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800259c:	4b99      	ldr	r3, [pc, #612]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a2:	4a98      	ldr	r2, [pc, #608]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d016      	beq.n	80025e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7fe fa74 	bl	8000aa0 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7fe fa70 	bl	8000aa0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e168      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d2:	4b8c      	ldr	r3, [pc, #560]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0ed      	beq.n	80025bc <HAL_RCC_OscConfig+0x53c>
 80025e0:	e015      	b.n	800260e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7fe fa5d 	bl	8000aa0 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe fa59 	bl	8000aa0 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e151      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002600:	4b80      	ldr	r3, [pc, #512]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1ed      	bne.n	80025ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800260e:	7ffb      	ldrb	r3, [r7, #31]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d105      	bne.n	8002620 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002614:	4b7b      	ldr	r3, [pc, #492]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002618:	4a7a      	ldr	r2, [pc, #488]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 800261a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800261e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d03c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01c      	beq.n	800266e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002634:	4b73      	ldr	r3, [pc, #460]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 8002636:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800263a:	4a72      	ldr	r2, [pc, #456]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002644:	f7fe fa2c 	bl	8000aa0 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800264c:	f7fe fa28 	bl	8000aa0 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e122      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800265e:	4b69      	ldr	r3, [pc, #420]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 8002660:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ef      	beq.n	800264c <HAL_RCC_OscConfig+0x5cc>
 800266c:	e01b      	b.n	80026a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800266e:	4b65      	ldr	r3, [pc, #404]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 8002670:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002674:	4a63      	ldr	r2, [pc, #396]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7fe fa0f 	bl	8000aa0 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002686:	f7fe fa0b 	bl	8000aa0 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e105      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002698:	4b5a      	ldr	r3, [pc, #360]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 800269a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ef      	bne.n	8002686 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80f9 	beq.w	80028a2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	f040 80cf 	bne.w	8002858 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026ba:	4b52      	ldr	r3, [pc, #328]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 0203 	and.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d12c      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	3b01      	subs	r3, #1
 80026da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d123      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d11b      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d113      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	3b01      	subs	r3, #1
 800270e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d109      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	3b01      	subs	r3, #1
 8002722:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d071      	beq.n	800280c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d068      	beq.n	8002800 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800272e:	4b35      	ldr	r3, [pc, #212]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800273a:	4b32      	ldr	r3, [pc, #200]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0ac      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800274a:	4b2e      	ldr	r3, [pc, #184]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2d      	ldr	r2, [pc, #180]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 8002750:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002754:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002756:	f7fe f9a3 	bl	8000aa0 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe f99f 	bl	8000aa0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e099      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002770:	4b24      	ldr	r3, [pc, #144]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277c:	4b21      	ldr	r3, [pc, #132]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	4b21      	ldr	r3, [pc, #132]	@ (8002808 <HAL_RCC_OscConfig+0x788>)
 8002782:	4013      	ands	r3, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800278c:	3a01      	subs	r2, #1
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	4311      	orrs	r1, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002796:	0212      	lsls	r2, r2, #8
 8002798:	4311      	orrs	r1, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800279e:	0852      	lsrs	r2, r2, #1
 80027a0:	3a01      	subs	r2, #1
 80027a2:	0552      	lsls	r2, r2, #21
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027aa:	0852      	lsrs	r2, r2, #1
 80027ac:	3a01      	subs	r2, #1
 80027ae:	0652      	lsls	r2, r2, #25
 80027b0:	4311      	orrs	r1, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027b6:	06d2      	lsls	r2, r2, #27
 80027b8:	430a      	orrs	r2, r1
 80027ba:	4912      	ldr	r1, [pc, #72]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027c0:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027d8:	f7fe f962 	bl	8000aa0 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe f95e 	bl	8000aa0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e058      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f2:	4b04      	ldr	r3, [pc, #16]	@ (8002804 <HAL_RCC_OscConfig+0x784>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027fe:	e050      	b.n	80028a2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e04f      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
 8002804:	40021000 	.word	0x40021000
 8002808:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280c:	4b27      	ldr	r3, [pc, #156]	@ (80028ac <HAL_RCC_OscConfig+0x82c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d144      	bne.n	80028a2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002818:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <HAL_RCC_OscConfig+0x82c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a23      	ldr	r2, [pc, #140]	@ (80028ac <HAL_RCC_OscConfig+0x82c>)
 800281e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002822:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002824:	4b21      	ldr	r3, [pc, #132]	@ (80028ac <HAL_RCC_OscConfig+0x82c>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a20      	ldr	r2, [pc, #128]	@ (80028ac <HAL_RCC_OscConfig+0x82c>)
 800282a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800282e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002830:	f7fe f936 	bl	8000aa0 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe f932 	bl	8000aa0 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e02c      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284a:	4b18      	ldr	r3, [pc, #96]	@ (80028ac <HAL_RCC_OscConfig+0x82c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x7b8>
 8002856:	e024      	b.n	80028a2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d01f      	beq.n	800289e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b13      	ldr	r3, [pc, #76]	@ (80028ac <HAL_RCC_OscConfig+0x82c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a12      	ldr	r2, [pc, #72]	@ (80028ac <HAL_RCC_OscConfig+0x82c>)
 8002864:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe f919 	bl	8000aa0 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002872:	f7fe f915 	bl	8000aa0 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e00f      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_RCC_OscConfig+0x82c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_RCC_OscConfig+0x82c>)
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	4905      	ldr	r1, [pc, #20]	@ (80028ac <HAL_RCC_OscConfig+0x82c>)
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_RCC_OscConfig+0x830>)
 8002898:	4013      	ands	r3, r2
 800289a:	60cb      	str	r3, [r1, #12]
 800289c:	e001      	b.n	80028a2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	feeefffc 	.word	0xfeeefffc

080028b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e11d      	b.n	8002b08 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b90      	ldr	r3, [pc, #576]	@ (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d910      	bls.n	80028fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b8d      	ldr	r3, [pc, #564]	@ (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 020f 	bic.w	r2, r3, #15
 80028e2:	498b      	ldr	r1, [pc, #556]	@ (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b89      	ldr	r3, [pc, #548]	@ (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e105      	b.n	8002b08 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d010      	beq.n	800292a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	4b81      	ldr	r3, [pc, #516]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002914:	429a      	cmp	r2, r3
 8002916:	d908      	bls.n	800292a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b7e      	ldr	r3, [pc, #504]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	497b      	ldr	r1, [pc, #492]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d079      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d11e      	bne.n	800297c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	4b75      	ldr	r3, [pc, #468]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0dc      	b.n	8002b08 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800294e:	f000 f9dd 	bl	8002d0c <RCC_GetSysClockFreqFromPLLSource>
 8002952:	4603      	mov	r3, r0
 8002954:	4a70      	ldr	r2, [pc, #448]	@ (8002b18 <HAL_RCC_ClockConfig+0x264>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d946      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800295a:	4b6e      	ldr	r3, [pc, #440]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d140      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002966:	4b6b      	ldr	r3, [pc, #428]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800296e:	4a69      	ldr	r2, [pc, #420]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002974:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e035      	b.n	80029e8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d107      	bne.n	8002994 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002984:	4b63      	ldr	r3, [pc, #396]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d115      	bne.n	80029bc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b9      	b.n	8002b08 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d107      	bne.n	80029ac <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800299c:	4b5d      	ldr	r3, [pc, #372]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d109      	bne.n	80029bc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0ad      	b.n	8002b08 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029ac:	4b59      	ldr	r3, [pc, #356]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0a5      	b.n	8002b08 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80029bc:	f000 f8b4 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4a55      	ldr	r2, [pc, #340]	@ (8002b18 <HAL_RCC_ClockConfig+0x264>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d90f      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80029c8:	4b52      	ldr	r3, [pc, #328]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d109      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 80029de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 0203 	bic.w	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4947      	ldr	r1, [pc, #284]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fa:	f7fe f851 	bl	8000aa0 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a02:	f7fe f84d 	bl	8000aa0 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e077      	b.n	8002b08 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a18:	4b3e      	ldr	r3, [pc, #248]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 020c 	and.w	r2, r3, #12
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d1eb      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b80      	cmp	r3, #128	@ 0x80
 8002a2e:	d105      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a30:	4b38      	ldr	r3, [pc, #224]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a37      	ldr	r2, [pc, #220]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002a36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a3a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d010      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	4b31      	ldr	r3, [pc, #196]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d208      	bcs.n	8002a6a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a58:	4b2e      	ldr	r3, [pc, #184]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	492b      	ldr	r1, [pc, #172]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6a:	4b29      	ldr	r3, [pc, #164]	@ (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d210      	bcs.n	8002a9a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a78:	4b25      	ldr	r3, [pc, #148]	@ (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 020f 	bic.w	r2, r3, #15
 8002a80:	4923      	ldr	r1, [pc, #140]	@ (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a88:	4b21      	ldr	r3, [pc, #132]	@ (8002b10 <HAL_RCC_ClockConfig+0x25c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e036      	b.n	8002b08 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d008      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	4918      	ldr	r1, [pc, #96]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d009      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac4:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4910      	ldr	r1, [pc, #64]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ad8:	f000 f826 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b0d      	ldr	r3, [pc, #52]	@ (8002b14 <HAL_RCC_ClockConfig+0x260>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	490c      	ldr	r1, [pc, #48]	@ (8002b1c <HAL_RCC_ClockConfig+0x268>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
 8002af4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b20 <HAL_RCC_ClockConfig+0x26c>)
 8002af6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002af8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <HAL_RCC_ClockConfig+0x270>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd ff7f 	bl	8000a00 <HAL_InitTick>
 8002b02:	4603      	mov	r3, r0
 8002b04:	73fb      	strb	r3, [r7, #15]

  return status;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40022000 	.word	0x40022000
 8002b14:	40021000 	.word	0x40021000
 8002b18:	04c4b400 	.word	0x04c4b400
 8002b1c:	08003834 	.word	0x08003834
 8002b20:	2000000c 	.word	0x2000000c
 8002b24:	20000010 	.word	0x20000010

08002b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	@ 0x24
 8002b2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b36:	4b3e      	ldr	r3, [pc, #248]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b40:	4b3b      	ldr	r3, [pc, #236]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x34>
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d121      	bne.n	8002b9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d11e      	bne.n	8002b9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b5c:	4b34      	ldr	r3, [pc, #208]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d107      	bne.n	8002b78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b68:	4b31      	ldr	r3, [pc, #196]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e005      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b78:	4b2d      	ldr	r3, [pc, #180]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b84:	4a2b      	ldr	r2, [pc, #172]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10d      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d102      	bne.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ba0:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	e004      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bac:	4b23      	ldr	r3, [pc, #140]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d134      	bne.n	8002c20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d003      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0xa6>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d003      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0xac>
 8002bcc:	e005      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bce:	4b1a      	ldr	r3, [pc, #104]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bd0:	617b      	str	r3, [r7, #20]
      break;
 8002bd2:	e005      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bd4:	4b19      	ldr	r3, [pc, #100]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bd6:	617b      	str	r3, [r7, #20]
      break;
 8002bd8:	e002      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	617b      	str	r3, [r7, #20]
      break;
 8002bde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002be0:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	3301      	adds	r3, #1
 8002bec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bee:	4b10      	ldr	r3, [pc, #64]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	fb03 f202 	mul.w	r2, r3, r2
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c06:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	0e5b      	lsrs	r3, r3, #25
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	3301      	adds	r3, #1
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c20:	69bb      	ldr	r3, [r7, #24]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	@ 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	08003844 	.word	0x08003844
 8002c38:	00f42400 	.word	0x00f42400
 8002c3c:	007a1200 	.word	0x007a1200

08002c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c44:	4b03      	ldr	r3, [pc, #12]	@ (8002c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	2000000c 	.word	0x2000000c

08002c58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c64:	4b27      	ldr	r3, [pc, #156]	@ (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c70:	f7ff f942 	bl	8001ef8 <HAL_PWREx_GetVoltageRange>
 8002c74:	6178      	str	r0, [r7, #20]
 8002c76:	e014      	b.n	8002ca2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c78:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7c:	4a21      	ldr	r2, [pc, #132]	@ (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c82:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c84:	4b1f      	ldr	r3, [pc, #124]	@ (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c90:	f7ff f932 	bl	8001ef8 <HAL_PWREx_GetVoltageRange>
 8002c94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c96:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ca0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca8:	d10b      	bne.n	8002cc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b80      	cmp	r3, #128	@ 0x80
 8002cae:	d913      	bls.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cb4:	d902      	bls.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	e00d      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	e00a      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002cc6:	d902      	bls.n	8002cce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002cc8:	2302      	movs	r3, #2
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	e004      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b70      	cmp	r3, #112	@ 0x70
 8002cd2:	d101      	bne.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 020f 	bic.w	r2, r3, #15
 8002ce0:	4909      	ldr	r1, [pc, #36]	@ (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ce8:	4b07      	ldr	r3, [pc, #28]	@ (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d001      	beq.n	8002cfa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40022000 	.word	0x40022000

08002d0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d12:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d00b      	beq.n	8002d3a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d825      	bhi.n	8002d74 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d008      	beq.n	8002d40 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d11f      	bne.n	8002d74 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002d34:	4b25      	ldr	r3, [pc, #148]	@ (8002dcc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d36:	613b      	str	r3, [r7, #16]
    break;
 8002d38:	e01f      	b.n	8002d7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002d3a:	4b25      	ldr	r3, [pc, #148]	@ (8002dd0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002d3c:	613b      	str	r3, [r7, #16]
    break;
 8002d3e:	e01c      	b.n	8002d7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d40:	4b21      	ldr	r3, [pc, #132]	@ (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d107      	bne.n	8002d5c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e005      	b.n	8002d68 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002d68:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d70:	613b      	str	r3, [r7, #16]
    break;
 8002d72:	e002      	b.n	8002d7a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
    break;
 8002d78:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d7a:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	3301      	adds	r3, #1
 8002d86:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d88:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	fb03 f202 	mul.w	r2, r3, r2
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002da0:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	0e5b      	lsrs	r3, r3, #25
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	3301      	adds	r3, #1
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002dba:	683b      	ldr	r3, [r7, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	00f42400 	.word	0x00f42400
 8002dd0:	007a1200 	.word	0x007a1200
 8002dd4:	08003844 	.word	0x08003844

08002dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e049      	b.n	8002e7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fd fd3a 	bl	8000878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f000 faa8 	bl	800336c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d001      	beq.n	8002ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e04f      	b.n	8002f40 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a23      	ldr	r2, [pc, #140]	@ (8002f4c <HAL_TIM_Base_Start_IT+0xc4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01d      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0x76>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eca:	d018      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0x76>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8002f50 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0x76>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1e      	ldr	r2, [pc, #120]	@ (8002f54 <HAL_TIM_Base_Start_IT+0xcc>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00e      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0x76>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f58 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d009      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0x76>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1b      	ldr	r2, [pc, #108]	@ (8002f5c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0x76>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a19      	ldr	r2, [pc, #100]	@ (8002f60 <HAL_TIM_Base_Start_IT+0xd8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d115      	bne.n	8002f2a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	4b17      	ldr	r3, [pc, #92]	@ (8002f64 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d015      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0xb4>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f16:	d011      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f28:	e008      	b.n	8002f3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e000      	b.n	8002f3e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	40012c00 	.word	0x40012c00
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800
 8002f58:	40000c00 	.word	0x40000c00
 8002f5c:	40013400 	.word	0x40013400
 8002f60:	40014000 	.word	0x40014000
 8002f64:	00010007 	.word	0x00010007

08002f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d020      	beq.n	8002fcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01b      	beq.n	8002fcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0202 	mvn.w	r2, #2
 8002f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f9bc 	bl	8003330 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f9ae 	bl	800331c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f9bf 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d020      	beq.n	8003018 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01b      	beq.n	8003018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0204 	mvn.w	r2, #4
 8002fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f996 	bl	8003330 <HAL_TIM_IC_CaptureCallback>
 8003004:	e005      	b.n	8003012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f988 	bl	800331c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f999 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d020      	beq.n	8003064 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0208 	mvn.w	r2, #8
 8003034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2204      	movs	r2, #4
 800303a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f970 	bl	8003330 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f962 	bl	800331c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f973 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b00      	cmp	r3, #0
 800306c:	d020      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0210 	mvn.w	r2, #16
 8003080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2208      	movs	r2, #8
 8003086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f94a 	bl	8003330 <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f93c 	bl	800331c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f94d 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0201 	mvn.w	r2, #1
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f91a 	bl	8003308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d104      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00c      	beq.n	8003102 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80030fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fb07 	bl	8003710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00c      	beq.n	8003126 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800311e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 faff 	bl	8003724 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00c      	beq.n	800314a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f907 	bl	8003358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00c      	beq.n	800316e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f06f 0220 	mvn.w	r2, #32
 8003166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fac7 	bl	80036fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_TIM_ConfigClockSource+0x1c>
 800318e:	2302      	movs	r3, #2
 8003190:	e0b6      	b.n	8003300 <HAL_TIM_ConfigClockSource+0x18a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ce:	d03e      	beq.n	800324e <HAL_TIM_ConfigClockSource+0xd8>
 80031d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031d4:	f200 8087 	bhi.w	80032e6 <HAL_TIM_ConfigClockSource+0x170>
 80031d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031dc:	f000 8086 	beq.w	80032ec <HAL_TIM_ConfigClockSource+0x176>
 80031e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031e4:	d87f      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x170>
 80031e6:	2b70      	cmp	r3, #112	@ 0x70
 80031e8:	d01a      	beq.n	8003220 <HAL_TIM_ConfigClockSource+0xaa>
 80031ea:	2b70      	cmp	r3, #112	@ 0x70
 80031ec:	d87b      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x170>
 80031ee:	2b60      	cmp	r3, #96	@ 0x60
 80031f0:	d050      	beq.n	8003294 <HAL_TIM_ConfigClockSource+0x11e>
 80031f2:	2b60      	cmp	r3, #96	@ 0x60
 80031f4:	d877      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x170>
 80031f6:	2b50      	cmp	r3, #80	@ 0x50
 80031f8:	d03c      	beq.n	8003274 <HAL_TIM_ConfigClockSource+0xfe>
 80031fa:	2b50      	cmp	r3, #80	@ 0x50
 80031fc:	d873      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x170>
 80031fe:	2b40      	cmp	r3, #64	@ 0x40
 8003200:	d058      	beq.n	80032b4 <HAL_TIM_ConfigClockSource+0x13e>
 8003202:	2b40      	cmp	r3, #64	@ 0x40
 8003204:	d86f      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x170>
 8003206:	2b30      	cmp	r3, #48	@ 0x30
 8003208:	d064      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x15e>
 800320a:	2b30      	cmp	r3, #48	@ 0x30
 800320c:	d86b      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x170>
 800320e:	2b20      	cmp	r3, #32
 8003210:	d060      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x15e>
 8003212:	2b20      	cmp	r3, #32
 8003214:	d867      	bhi.n	80032e6 <HAL_TIM_ConfigClockSource+0x170>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d05c      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x15e>
 800321a:	2b10      	cmp	r3, #16
 800321c:	d05a      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x15e>
 800321e:	e062      	b.n	80032e6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003230:	f000 f9bc 	bl	80035ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003242:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	609a      	str	r2, [r3, #8]
      break;
 800324c:	e04f      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800325e:	f000 f9a5 	bl	80035ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003270:	609a      	str	r2, [r3, #8]
      break;
 8003272:	e03c      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003280:	461a      	mov	r2, r3
 8003282:	f000 f919 	bl	80034b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2150      	movs	r1, #80	@ 0x50
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f972 	bl	8003576 <TIM_ITRx_SetConfig>
      break;
 8003292:	e02c      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a0:	461a      	mov	r2, r3
 80032a2:	f000 f938 	bl	8003516 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2160      	movs	r1, #96	@ 0x60
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 f962 	bl	8003576 <TIM_ITRx_SetConfig>
      break;
 80032b2:	e01c      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c0:	461a      	mov	r2, r3
 80032c2:	f000 f8f9 	bl	80034b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2140      	movs	r1, #64	@ 0x40
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 f952 	bl	8003576 <TIM_ITRx_SetConfig>
      break;
 80032d2:	e00c      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f000 f949 	bl	8003576 <TIM_ITRx_SetConfig>
      break;
 80032e4:	e003      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ea:	e000      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x178>
      break;
 80032ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a46      	ldr	r2, [pc, #280]	@ (8003498 <TIM_Base_SetConfig+0x12c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338a:	d00f      	beq.n	80033ac <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a43      	ldr	r2, [pc, #268]	@ (800349c <TIM_Base_SetConfig+0x130>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00b      	beq.n	80033ac <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a42      	ldr	r2, [pc, #264]	@ (80034a0 <TIM_Base_SetConfig+0x134>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d007      	beq.n	80033ac <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a41      	ldr	r2, [pc, #260]	@ (80034a4 <TIM_Base_SetConfig+0x138>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d003      	beq.n	80033ac <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a40      	ldr	r2, [pc, #256]	@ (80034a8 <TIM_Base_SetConfig+0x13c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d108      	bne.n	80033be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a35      	ldr	r2, [pc, #212]	@ (8003498 <TIM_Base_SetConfig+0x12c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01f      	beq.n	8003406 <TIM_Base_SetConfig+0x9a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033cc:	d01b      	beq.n	8003406 <TIM_Base_SetConfig+0x9a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a32      	ldr	r2, [pc, #200]	@ (800349c <TIM_Base_SetConfig+0x130>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d017      	beq.n	8003406 <TIM_Base_SetConfig+0x9a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a31      	ldr	r2, [pc, #196]	@ (80034a0 <TIM_Base_SetConfig+0x134>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <TIM_Base_SetConfig+0x9a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a30      	ldr	r2, [pc, #192]	@ (80034a4 <TIM_Base_SetConfig+0x138>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00f      	beq.n	8003406 <TIM_Base_SetConfig+0x9a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2f      	ldr	r2, [pc, #188]	@ (80034a8 <TIM_Base_SetConfig+0x13c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00b      	beq.n	8003406 <TIM_Base_SetConfig+0x9a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a2e      	ldr	r2, [pc, #184]	@ (80034ac <TIM_Base_SetConfig+0x140>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <TIM_Base_SetConfig+0x9a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a2d      	ldr	r2, [pc, #180]	@ (80034b0 <TIM_Base_SetConfig+0x144>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d003      	beq.n	8003406 <TIM_Base_SetConfig+0x9a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a2c      	ldr	r2, [pc, #176]	@ (80034b4 <TIM_Base_SetConfig+0x148>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d108      	bne.n	8003418 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800340c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a16      	ldr	r2, [pc, #88]	@ (8003498 <TIM_Base_SetConfig+0x12c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00f      	beq.n	8003464 <TIM_Base_SetConfig+0xf8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a18      	ldr	r2, [pc, #96]	@ (80034a8 <TIM_Base_SetConfig+0x13c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00b      	beq.n	8003464 <TIM_Base_SetConfig+0xf8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a17      	ldr	r2, [pc, #92]	@ (80034ac <TIM_Base_SetConfig+0x140>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <TIM_Base_SetConfig+0xf8>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a16      	ldr	r2, [pc, #88]	@ (80034b0 <TIM_Base_SetConfig+0x144>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_Base_SetConfig+0xf8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a15      	ldr	r2, [pc, #84]	@ (80034b4 <TIM_Base_SetConfig+0x148>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d103      	bne.n	800346c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d105      	bne.n	800348a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f023 0201 	bic.w	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	611a      	str	r2, [r3, #16]
  }
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40000400 	.word	0x40000400
 80034a0:	40000800 	.word	0x40000800
 80034a4:	40000c00 	.word	0x40000c00
 80034a8:	40013400 	.word	0x40013400
 80034ac:	40014000 	.word	0x40014000
 80034b0:	40014400 	.word	0x40014400
 80034b4:	40014800 	.word	0x40014800

080034b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f023 0201 	bic.w	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f023 030a 	bic.w	r3, r3, #10
 80034f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	621a      	str	r2, [r3, #32]
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003516:	b480      	push	{r7}
 8003518:	b087      	sub	sp, #28
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f023 0210 	bic.w	r2, r3, #16
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003540:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	031b      	lsls	r3, r3, #12
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003552:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	621a      	str	r2, [r3, #32]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800358c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	f043 0307 	orr.w	r3, r3, #7
 8003598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	609a      	str	r2, [r3, #8]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	021a      	lsls	r2, r3, #8
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	609a      	str	r2, [r3, #8]
}
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003600:	2302      	movs	r3, #2
 8003602:	e068      	b.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a2e      	ldr	r2, [pc, #184]	@ (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2d      	ldr	r2, [pc, #180]	@ (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d108      	bne.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800363e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003650:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1e      	ldr	r2, [pc, #120]	@ (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01d      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003676:	d018      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1b      	ldr	r2, [pc, #108]	@ (80036ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1a      	ldr	r2, [pc, #104]	@ (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00e      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a18      	ldr	r2, [pc, #96]	@ (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d009      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a13      	ldr	r2, [pc, #76]	@ (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a14      	ldr	r2, [pc, #80]	@ (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d10c      	bne.n	80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40013400 	.word	0x40013400
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40000800 	.word	0x40000800
 80036f4:	40000c00 	.word	0x40000c00
 80036f8:	40014000 	.word	0x40014000

080036fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <arm_sin_f32>:
 8003738:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80037b8 <arm_sin_f32+0x80>
 800373c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003740:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003748:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800374c:	d504      	bpl.n	8003758 <arm_sin_f32+0x20>
 800374e:	ee17 3a90 	vmov	r3, s15
 8003752:	3b01      	subs	r3, #1
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800375c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80037bc <arm_sin_f32+0x84>
 8003760:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003764:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003768:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800376c:	ee17 3a90 	vmov	r3, s15
 8003770:	b29b      	uxth	r3, r3
 8003772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003776:	d21a      	bcs.n	80037ae <arm_sin_f32+0x76>
 8003778:	ee07 3a90 	vmov	s15, r3
 800377c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003780:	1c59      	adds	r1, r3, #1
 8003782:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003786:	4a0e      	ldr	r2, [pc, #56]	@ (80037c0 <arm_sin_f32+0x88>)
 8003788:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800378c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003790:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003794:	ed93 7a00 	vldr	s14, [r3]
 8003798:	edd2 6a00 	vldr	s13, [r2]
 800379c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80037a0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80037a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037a8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80037ac:	4770      	bx	lr
 80037ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 80037b2:	2101      	movs	r1, #1
 80037b4:	2300      	movs	r3, #0
 80037b6:	e7e6      	b.n	8003786 <arm_sin_f32+0x4e>
 80037b8:	3e22f983 	.word	0x3e22f983
 80037bc:	44000000 	.word	0x44000000
 80037c0:	08003874 	.word	0x08003874

080037c4 <memset>:
 80037c4:	4402      	add	r2, r0
 80037c6:	4603      	mov	r3, r0
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d100      	bne.n	80037ce <memset+0xa>
 80037cc:	4770      	bx	lr
 80037ce:	f803 1b01 	strb.w	r1, [r3], #1
 80037d2:	e7f9      	b.n	80037c8 <memset+0x4>

080037d4 <__libc_init_array>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4d0d      	ldr	r5, [pc, #52]	@ (800380c <__libc_init_array+0x38>)
 80037d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003810 <__libc_init_array+0x3c>)
 80037da:	1b64      	subs	r4, r4, r5
 80037dc:	10a4      	asrs	r4, r4, #2
 80037de:	2600      	movs	r6, #0
 80037e0:	42a6      	cmp	r6, r4
 80037e2:	d109      	bne.n	80037f8 <__libc_init_array+0x24>
 80037e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003814 <__libc_init_array+0x40>)
 80037e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003818 <__libc_init_array+0x44>)
 80037e8:	f000 f818 	bl	800381c <_init>
 80037ec:	1b64      	subs	r4, r4, r5
 80037ee:	10a4      	asrs	r4, r4, #2
 80037f0:	2600      	movs	r6, #0
 80037f2:	42a6      	cmp	r6, r4
 80037f4:	d105      	bne.n	8003802 <__libc_init_array+0x2e>
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fc:	4798      	blx	r3
 80037fe:	3601      	adds	r6, #1
 8003800:	e7ee      	b.n	80037e0 <__libc_init_array+0xc>
 8003802:	f855 3b04 	ldr.w	r3, [r5], #4
 8003806:	4798      	blx	r3
 8003808:	3601      	adds	r6, #1
 800380a:	e7f2      	b.n	80037f2 <__libc_init_array+0x1e>
 800380c:	08004078 	.word	0x08004078
 8003810:	08004078 	.word	0x08004078
 8003814:	08004078 	.word	0x08004078
 8003818:	0800407c 	.word	0x0800407c

0800381c <_init>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	bf00      	nop
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr

08003828 <_fini>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr
